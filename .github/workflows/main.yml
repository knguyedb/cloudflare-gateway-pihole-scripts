name: Update Filter Lists

on:
  schedule:
    - cron: "0 21 * * *"  # 21:00 UTC = 04:00 GMT+7 h√†ng ng√†y
  push:
    branches:
      - main
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_ENV: production

jobs:
  cgps:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          repository: "mrrfv/cloudflare-gateway-pihole-scripts"
          ref: "v1"

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".node-version"

      - name: Install npm dependencies
        run: npm ci

      - name: Download allowlists
        run: npm run download:allowlist
        env:
          ALLOWLIST_URLS: ${{ vars.ALLOWLIST_URLS }}

      - name: Download blocklists
        run: npm run download:blocklist
        env:
          BLOCKLIST_URLS: ${{ vars.BLOCKLIST_URLS }}

      - name: Delete old rules and lists
        run: npm run cloudflare-delete
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          CLOUDFLARE_LIST_ITEM_LIMIT: ${{ secrets.CLOUDFLARE_LIST_ITEM_LIMIT }}
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}

      - name: Create new rules and lists
        run: npm run cloudflare-create
        env:
          BLOCK_PAGE_ENABLED: ${{ vars.BLOCK_PAGE_ENABLED }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          CLOUDFLARE_LIST_ITEM_LIMIT: ${{ secrets.CLOUDFLARE_LIST_ITEM_LIMIT }}
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}

      - name: Send ping request
        if: env.PING_URL != ''
        run: |
          curl "${{ env.PING_URL }}"
        env:
          PING_URL: ${{ secrets.PING_URL }}

      - name: Notify Telegram - SUCCESS
        if: success()
        run: |
          MESSAGE="‚úÖ *Cloudflare Gateway Update Succeeded*%0A\
üìÑ *Workflow*: ${{ github.workflow }}%0A\
üì¶ *Repository*: ${{ github.repository }}%0A\
üåø *Branch*: ${{ github.ref_name }}%0A\
üïí *Time*: $(TZ='Asia/Ho_Chi_Minh' date '+%Y-%m-%d %H:%M:%S')%0A\
üîó [View Commit](https://github.com/${{ github.repository }}/commit/${{ github.sha }})"

          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
            -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
            -d parse_mode=Markdown \
            -d text="$MESSAGE"

      - name: Notify Telegram - FAILURE
        if: failure()
        run: |
          MESSAGE="‚ùå *Cloudflare Gateway Update Failed*%0A\
üìÑ *Workflow*: ${{ github.workflow }}%0A\
üì¶ *Repository*: ${{ github.repository }}%0A\
üåø *Branch*: ${{ github.ref_name }}%0A\
üïí *Time*: $(TZ='Asia/Ho_Chi_Minh' date '+%Y-%m-%d %H:%M:%S')%0A\
üö® *Check logs in GitHub Actions!*%0A\
üîó [View Logs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})"

          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
            -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
            -d parse_mode=Markdown \
            -d text="$MESSAGE"

  keepalive:
    if: github.event_name == 'schedule'
    runs-on: ubuntu-latest
    permissions:
      actions: write
    steps:
      - uses: liskin/gh-workflow-keepalive@v1
